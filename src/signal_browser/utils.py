import base64
import io
import json
import math
import zipfile
from datetime import datetime, timedelta, timezone
from typing import BinaryIO

import pandas as pd
from PySide6.QtGui import QPalette, QColor


class TimeConversionUtils:
    """
    Class: TimeConversionUtils

    Utilities for converting different time formats to datetime objects.

    Methods:
    1. oledatetime_to_datetime(dateval: float) -> datetime:
        Converts an OLE datetime to a datetime object.

    2. epoch_timestamp_to_datetime(dateval: float) -> datetime:
         Converts a zero epoch timestamp to a datetime object.

    3. json_to_datetime(data: dict | str) -> datetime:
        Converts a timestamp from JSON to a datetime object.
        Parameters:
        - data: The timestamp in JSON format. It can be either a dictionary
                in the format {sec:, nanosec:} or a JSON string.

    4. unixtime_ns_to_datetime(ns_value: int) -> datetime:
        Converts a nanosecond Unix timestamp to a datetime object.

    Note: All the methods are static methods and can be called without
    creating an instance of the class.
    """

    @staticmethod
    def oledatetime_to_datetime(dateval: float) -> datetime:
        """
        Converts a float value representing an OLE Automation date to a datetime object.

        Parameters:
            - dateval (float): The OLE Automation date value to be converted.

        Returns:
            - datetime: The corresponding datetime object.

        Example usage:

            dateval = 44197.8125
            result = oledatetime_to_datetime(dateval)
            print(result)

        Output:
            2021-07-12 19:30:00

        Note:
            - An OLE Automation date is a floating-point value representing the number of days (inclusive of fractional days) since
              midnight on December 30, 1899.
            - The datetime object is generated by adding the number of whole days from the OLE Automation date to the base date of
              December 30, 1899, and then adding the fractional part as a timedelta.
        """
        basedate = datetime(year=1899, month=12, day=30, hour=0, minute=0)
        parts = math.modf(dateval)
        days = timedelta(parts[1])
        day_frac = timedelta(abs(parts[0]))
        return basedate + days + day_frac

    @staticmethod
    def datetime_to_oledatetime(dateval):
        """
        Converts a Python datetime object to an OLE Automation date value.

        :param dateval: The Python datetime object to convert.
        :return: The corresponding OLE Automation date value.

        The OLE Automation date is a floating-point value representing the number of days since midnight on December 30, 1899. The fraction of the day is represented by the decimal part of the
        * floating-point value, with 0.5 representing noon. This method calculates the OLE Automation date value for the given Python datetime object by subtracting the base date (December
        *30, 1899) and converting the resulting timedelta to a float value.

        Example usage:
        ```
        import datetime

        date = datetime.datetime(2022, 1, 15)
        ole_date = datetime_to_oledatetime(date)
        print(ole_date)  # Output: 44427.0
        ```
        """
        basedate = datetime(1899, 12, 30)
        delta = dateval - basedate
        return float(delta.days) + (float(delta.seconds) / 86400)

    @staticmethod
    def epoch_timestamp_to_datetime(dateval: float) -> datetime:
        """
        Converts an epoch timestamp to a datetime object.

        Parameters:
        - dateval (float): The epoch timestamp to be converted.

        Returns:
        - datetime: The datetime object representing the epoch timestamp.

        Example:
        epoch_timestamp_to_datetime(1598918409.123456)
        Output: datetime.datetime(2020, 9, 1, 0, 0, 9, 123456)
        """
        basedate = datetime(year=1, month=1, day=1, hour=0, minute=0)
        parts = math.modf(dateval)
        days = timedelta(seconds=parts[1])
        day_frac = timedelta(seconds=parts[0])
        return (basedate + days + day_frac) - timedelta(days=365)

    @staticmethod
    def json_to_datetime(data: dict | str) -> datetime:
        """
        Converts JSON data to a datetime object.

        Parameters:
            data (dict or str): The JSON data to be converted. If a string is provided, it will be automatically parsed as JSON.

        Returns:
            datetime: The converted datetime object.

        Example Usage:
            >>> data = '{"sec": 1634324678, "nanosec": 500000000}'
            >>> json_to_datetime(data)
            datetime.datetime(2021, 10, 15, 20, 24, 38, 500000)

            >>> data = {"sec": 1634324678, "nanosec": 500000000}
            >>> json_to_datetime(data)
            datetime.datetime(2021, 10, 15, 20, 24, 38, 500000)
        """
        if isinstance(data, str):
            data = json.loads(data)
        return datetime.fromtimestamp(data["sec"], timezone.utc) + timedelta(microseconds=data["nanosec"] / 1000)

    @staticmethod
    def unixtime_ns_to_datetime(ns_value: int) -> datetime:
        """
        Converts a Unix timestamp in nanoseconds to a datetime object.

        Parameters:
        - ns_value (int): The Unix timestamp value in nanoseconds.

        Returns:
        - datetime: The corresponding datetime object.

        Example usage:
            ns_value = 1609459200000000000
            datetime_obj = unixtime_ns_to_datetime(ns_value)
            print(datetime_obj)

        Output:
            2021-01-01 00:00:00
        """
        return datetime.fromtimestamp(ns_value / 1e9, timezone.utc)


def retain_changed_values(df: pd.DataFrame):
    """
    Retains the changed values in each column of a Pandas DataFrame.

    Parameters:
        df (pd.DataFrame): The input DataFrame.

    Returns:
        pd.DataFrame: A new DataFrame containing only the changed values in each column.

    """
    output = {}
    for col in df:
        output[col] = retain_changed_values_on_series
    return pd.DataFrame(output)


def retain_changed_values_on_series(data: pd.Series):
    """
    Retains only the values in a pandas Series that have changed from the previous value.

    :param data: A pandas Series object.
    :return: A new pandas Series object containing only the values that have changed.
    """
    return data.where(data.shift() != data).dropna()


def read_struct_from_binary(binary: BinaryIO):
    """
    Reads a structured string from a binary file.

    Args:
        binary (BinaryIO): The binary file to read from.

    Returns:
        str: The decoded structured string.

    """
    length = int.from_bytes(binary.read(4), "little")
    bufferd = binary.read(length)
    struct = bufferd.decode("ANSI")
    return struct


def zipfile_from_bytes(content_bytes):
    """
    Create a ZipFile object from a given base64 encoded byte content.

    :param content_bytes: The base64 encoded byte content of the ZIP file.
    :type content_bytes: bytes
    :return: The ZipFile object representing the given ZIP file.
    :rtype: zipfile.ZipFile

    Example Usage:
        >>> content_bytes = b'eJxTTMoPS2Z'
        >>> zipfile = zipfile_from_bytes(content_bytes)
        >>> zipfile.namelist()

    Note:
        This method uses the base64 and zipfile modules from the Python standard library to decode the base64 encoded byte content and create a ZipFile object from it.
    """
    content_decoded = base64.b64decode(content_bytes)
    # Use BytesIO to handle the decoded content
    zip_str = io.BytesIO(content_decoded)
    # Now you can use ZipFile to take the BytesIO output
    zfile = zipfile.ZipFile(zip_str, 'r')
    return zfile


def get_darkModePalette(app=None):
    darkPalette = app.palette()
    darkPalette.setColor(QPalette.Window, QColor(53, 53, 53))
    darkPalette.setColor(QPalette.WindowText, QColor(255, 255, 255))
    darkPalette.setColor(QPalette.Disabled, QPalette.WindowText, QColor(127, 127, 127))
    darkPalette.setColor(QPalette.Base, QColor(42, 42, 42))
    darkPalette.setColor(QPalette.AlternateBase, QColor(66, 66, 66))
    darkPalette.setColor(QPalette.ToolTipBase, QColor(53, 53, 53))
    darkPalette.setColor(QPalette.ToolTipText, QColor(255, 255, 255))
    darkPalette.setColor(QPalette.Text, QColor(255, 255, 255))
    darkPalette.setColor(QPalette.Disabled, QPalette.Text, QColor(127, 127, 127))
    darkPalette.setColor(QPalette.Dark, QColor(35, 35, 35))
    darkPalette.setColor(QPalette.Shadow, QColor(20, 20, 20))
    darkPalette.setColor(QPalette.Button, QColor(53, 53, 53))
    darkPalette.setColor(QPalette.ButtonText, QColor(255, 255, 255))
    darkPalette.setColor(QPalette.Disabled, QPalette.ButtonText, QColor(127, 127, 127))
    darkPalette.setColor(QPalette.BrightText, QColor(255, 0, 0))
    darkPalette.setColor(QPalette.Link, QColor(42, 130, 218))
    darkPalette.setColor(QPalette.Highlight, QColor(42, 130, 218))
    darkPalette.setColor(QPalette.Disabled, QPalette.Highlight, QColor(80, 80, 80))
    darkPalette.setColor(QPalette.HighlightedText, QColor(255, 255, 255))
    darkPalette.setColor(QPalette.Disabled, QPalette.HighlightedText, QColor(127, 127, 127)),



    return darkPalette
